
## SOLUTION 1
SELECT 'succeed' AS period_state, min(success_date) AS start_date, max(success_date) AS end_date
FROM (SELECT success_date, row_number()over(order by success_date) as row_num
      FROM Succeeded
      WHERE succeed_date between '2019-01-01' and '2019-12-31') t
GROUP BY dayofyear(success_date)-row_num

UNION ALL

SELECT 'failed' AS period_state, min(fail_date) as start_date, max(fail_date) as end_date
FROM (SELECT fail_date, row_number()over(order by fail_date) as row_num
      FROM Failed
      WHERE fail_date between '2019-01-01' and '2019-12-31'
GROUP BY dayofyear(fail_date)-row_num

ORDER BY start_date


## SOLUTION 2
SELECT state AS period_state, min(ds) AS start_date, max(ds) AS end_date
FROM (
      SELECT ds, state, row_number()over(partition by state order by ds) seq
      FROM (
             SELECT fail_date AS ds, 'failed' AS state FROM failed WHERE year(fail_date) = 2019
             UNION ALL
             SELECT success_date AS ds, 'succeeded' AS sate FROM succeed WHERE year(succeed_date) = 2019) a)
            ) b
 GROUP BY state, date(day, -seq, ds)
 ORDER BY start_date
             








Table: Failed

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| fail_date    | date    |
+--------------+---------+
Primary key for this table is fail_date.
Failed table contains the days of failed tasks.
Table: Succeeded

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| success_date | date    |
+--------------+---------+
Primary key for this table is success_date.
Succeeded table contains the days of succeeded tasks.
 

A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.

Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.

period_state is 'failed' if tasks in this interval failed or 'succeeded' if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.

Order result by start_date.

The query result format is in the following example:

Failed table:
+-------------------+
| fail_date         |
+-------------------+
| 2018-12-28        |
| 2018-12-29        |
| 2019-01-04        |
| 2019-01-05        |
+-------------------+

Succeeded table:
+-------------------+
| success_date      |
+-------------------+
| 2018-12-30        |
| 2018-12-31        |
| 2019-01-01        |
| 2019-01-02        |
| 2019-01-03        |
| 2019-01-06        |
+-------------------+


Result table:
+--------------+--------------+--------------+
| period_state | start_date   | end_date     |
+--------------+--------------+--------------+
| succeeded    | 2019-01-01   | 2019-01-03   |
| failed       | 2019-01-04   | 2019-01-05   |
| succeeded    | 2019-01-06   | 2019-01-06   |
+--------------+--------------+--------------+

The report ignored the system state in 2018 as we care about the system in the period 2019-01-01 to 2019-12-31.
From 2019-01-01 to 2019-01-03 all tasks succeeded and the system state was "succeeded".
From 2019-01-04 to 2019-01-05 all tasks failed and system state was "failed".
From 2019-01-06 to 2019-01-06 all tasks succeeded and system state was "succeeded".
