## SOLUTION 1
SELECT student_id, course_id, grade
FROM (
      SELECT student_id, course_id, grade, RANK()OVER(PARTITION BY student_id ORDER BY grade DESC, course_id) AS rnk
      FROM Enrollments
      ï¼‰ a
WHERE rnk = 1

## SOLUTION 2
SELECT e1.student_id, MIN(e1.course_id) AS course_id, e1.grade
FROM Enrollments e1
WHERE e1.grade = (
                   SELECT MAX(grade) as max_grade
                   FROM Enrollments e2
                   WHERE e1.student_id = e2.student_id)
GROUP BY e1.student_id
ORDER BY e1.student_id




Table: Enrollments

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| student_id    | int     |
| course_id     | int     |
| grade         | int     |
+---------------+---------+
(student_id, course_id) is the primary key of this table.

Write a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest course_id. The output must be sorted by increasing student_id.

The query result format is in the following example:

Enrollments table:
+------------+-------------------+
| student_id | course_id | grade |
+------------+-----------+-------+
| 2          | 2         | 95    |
| 2          | 3         | 95    |
| 1          | 1         | 90    |
| 1          | 2         | 99    |
| 3          | 1         | 80    |
| 3          | 2         | 75    |
| 3          | 3         | 82    |
+------------+-----------+-------+

Result table:
+------------+-------------------+
| student_id | course_id | grade |
+------------+-----------+-------+
| 1          | 2         | 99    |
| 2          | 2         | 95    |
| 3          | 3         | 82    |
+------------+-----------+-------+
