Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
For example, given the above Scores table, your query should generate the following report (order by highest score):
+-------+---------+
| score | Rank    |
+-------+---------+
| 4.00  | 1       |
| 4.00  | 1       |
| 3.85  | 2       |
| 3.65  | 3       |
| 3.65  | 3       |
| 3.50  | 4       |
+-------+---------+
Important Note: For MySQL solutions, to escape reserved words used as column names, you can use an apostrophe before and after the keyword. For example `Rank`.

###solution:
solution 1:
Key:注意如果SQL中要有到一些reserved word作为列名字，可以使用引号来避免执行错误；用window function中的dense_rank over()
	SELECT score, DENSE_RANK() OVER(ORDER BY score DESC) AS 'Rank'
	FROM scores

solution 2:
key:subquery
	SELECT s1.score, COUNT(S2.score) AS 'Rank'
	FROM scores s1, (SELECT DISTINCT score FROM scores) S2
	WHERE s1.score<=s2.score
	GROUP BY s1.ID #这一步是为了让重复的score也显示出排名
	ORDER BY S1.score DESC
	
	SELECT score, (SELECT COUNT(*) FROM (SELECT DISTINCT score s FROM scores) tem 
	               WHERE s>=score) 'Rank'
	FROM scores
	ORDER BY score DESC

solution 3:
key:variables
	SELECT score, @rank := @rank+ (@previous <> (@previous :=score)) 'Rank'
	FROM scores, (SELECT @previous:=-1,@rank:=0))
    ORDER BY score DESC
	

	
	
