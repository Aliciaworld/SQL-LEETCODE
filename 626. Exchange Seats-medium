Mary is a teacher in a middle school and she has a table seat storing students' names and their corresponding seat ids.

The column id is continuous increment.
 

Mary wants to change seats for the adjacent students.
 

Can you write a SQL query to output the result for Mary?
 

+---------+---------+
|    id   | student |
+---------+---------+
|    1    | Abbot   |
|    2    | Doris   |
|    3    | Emerson |
|    4    | Green   |
|    5    | Jeames  |
+---------+---------+
For the sample input, the output is:
 

+---------+---------+
|    id   | student |
+---------+---------+
|    1    | Doris   |
|    2    | Abbot   |
|    3    | Green   |
|    4    | Emerson |
|    5    | Jeames  |
+---------+---------+
Note:
If the number of students is odd, there is no need to change the last one's seat.

###solution:
solution 1:
key:flow control statement(case when) + MOD()
	SELECT (CASE WHEN MOD(id,2)!=0 AND counts!=id THEN id+1
				 WHEN MOD(id,2)!=0 AND counts = id THEN id
				 ELSE id-1
				 END) AS id, student
	FROM seat, (SELECT COUNT(*) AS counts FROM seat) AS seat_counts
	ORDER BY id ASC

solution 2:
key:flow control statement(case when)+ %
	SELECT CASE WHEN id%2=0 THEN id-1
	            WHEN id%2=1 and id<(SELECT COUNT(*) FROM seat) THEN id+1
				ELSE id
				END AS id, student
	FROM seat
	ORDER BY id

solution 3:
key: union
		SELECT id-1 AS id, student
		FROM seat
		WHERE id MOD 2=0
		
		UNION
		
		SELECT id+1 AS id, student
		FROM seat
		WHERE id MOD 2=1 AND id!=(SELECT MAX(id) FROM seat)
		
		UNION
		
		SELECT id, student
		FROM seat
		WHERE id MOD 2=1 AND id=(SELECT MAX(id) FROM seat)
		
		ORDER BY id ASC
